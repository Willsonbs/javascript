
#Variáveis:

* - Podem começar com Letra, $ ou _
* - Não podem conter números
* - Não podem ser palavras reservadas do JavaScript
* - Não podem conter espaços
* - É possível usar letras e números
* - É possível usar acentos e símbolos

#Obserevar para usar nomes coerentes.
Exemplo:
nome = 'wilson'
idade = '18''
sexo = 'M'

a = '10'
A = '10'    Nesse caso existem duas variáveis. O melhor é padronizar
Maiúsculas e minúsculas fazem diferença.

#Tipos primitivos:

Number = 1, 10, -8, -10.8 (Infinity ou NaN)
String: (google, JavaScript, Python)
boolean = true or false

null:
undefined:
object:
array:
function:

#Como converter:
Como fazer com que um número digitado em um prompt() possa ser usado em cálculos?

var n1 = window.prompt('Digite um número: ')
var n2 = window.prompt('Digite outro número: ')
var soma = n1 + n2;
window.alert('A soma dos dois números é '+ soma + '.')

Neste exemplo acima, o navegador vai retornar a soma considerando que os dois valores são uma string = n1(5) + n2(5) = 55

convertendo: preciso informar que a variável é do tipo Number
var n1 = Number(window.prompt('Digite um número: '))
var n2 = Number(window.prompt('Digite outro número: '))
var soma = n1 + n2;
window.alert('A soma dos dois números é '+ soma + '.')


#Convertendo para String:


var n1 = Number(window.prompt('Digite um número: '))
var n2 = Number(window.prompt('Digite outro número: '))
var soma = n1 + n2;
window.alert('A soma dos dois números é '+ String(soma) + '.')

#Formatando strings:
Como transformar um texto todo para letras maiúsculas ou minúsculas?

var s = 'wilson''
s.length = quantos caracteres a string tem
s.toUpperCase = transforma em Maiúsculas
s.toLowerCase = transforma em minúsculas

#Formatando números:

var n1 = 1545.5
n1 =1545.5
n1.toFixed(2).replace('.', ',') = 1545.50
n1.toLocaleString('pt-br', {style: 'currency', currency: 'BRL'})
n1.toLocaleString('pt-br', {style: 'currency', currency: 'USD'})
n1.toLocaleString('pt-br', {style: 'currency', currency: 'EUR'})

#Guardando um valor digitado no prompt:

Guardar o valor digitado em um prompt() dentro de uma variável é bem simples. A função prompt() retorna o que o usuário digita em formato de string. Esse valor pode ser armazenado diretamente em uma variável para uso posterior. Exemplo:

*var nome = window.prompt('Qual é o seu nome?');
        window.alert(`Seu nome possui ${nome.length} letras.`);

#Exemplos cobinando conversão:

#números inteiros: 
var idade = parseInt(prompt('Digite sua idade:'));
console.log('A idade digitada foi: ' + idade);

#números decimais:
var altura = parseFloat(prompt('Digite sua altura em metros:'));
console.log('A altura digitada foi: ' + altura);

#números gerais:
var preco = Number(prompt('Digite o preço do produto:'));
console.log('O preço digitado foi: ' + preco);

#Validação de dados:
Como o usuário pode digitar algo inválido (como texto quando o número é esperado), é uma boa prática validar a entrada. Exemplo:
var idade = prompt('Digite sua idade:');
if (isNaN(idade)) {
    console.log('Por favor, insira um número válido.');
} else {
    idade = Number(idade); // Converte para número após validação
    console.log('A idade digitada foi: ' + idade);
}

#Operadores:
#aritméticos:
    + - %  / **
Exemplos:
    5 + 2 = 7
    5 - 2 = 3
    5 * 2 = 10
    5 / 2 = 2.5
    5 % 2 = 1
    5 ** 2 = 25

OBS: Precedência de operadores (5 + 3 / 2 ) nesse exemplo não é 4 o resultado, considerando que o cálculo tenho sido feito nessa ordem: 5+3 primeiro e depois dividir por 2.

Quando temos uma expressão com soma e divisão, a divisão é feita primeiro, se não estiver dentro de parenteses:
    5 + 3 / 2 = 6.5
Verificar a ordem: 
()
** 
*, /, % (se faz o símbolo que aparece primeiro)
 +, - 


#atribuição:
atribuições simples.
    var a = 5 + 3 == 8
    var b = a % 5 == 3    ( a = 8 / 5 = 1 para 8 restam 3)
    var c = 5 * b ** 2 == 45    ( 5x b elevado a 2)
    var d = 10 - a / 2 == 6    (10 - 8 / 2 primeiro a divisão)
    var e = 6 * 2 / d == 2    (6 x 2 / 6)
    var f = b % e + 4 / e == 3   ( como a divisão e porcentagem aparecem na mesma linha, fazemos % e depois / depois somamos)

Auto atribuição:
var n = 3
n = n + 4 simplificado n += 4
n = n - 5 simplificado n -= 5

#Incremento:
    var x = 5
    x = x + 1 simplificado x++
Existe o pós Incremento e pré-Incremento

pré-decremento e pós-decremento
--n ou ++n  que tem a mesma função o que muda é a ordem

#relacionais:
    Maior: 5 > 3 true
    Menor: 5 < 3 false
    Maior ou igual: 8 >= 8 true
    Menor ou igual: 9 <= 7 false
    Igualdade: 5 == 5 true
    Diferente: 5!= 5 false

    operador de identidade:
    5 == 5 true
    5 == '5'true
    5 === 5 ( 3 sinais de igual verifica se é identico)

#lógicos:

    ! negação
        true or false
    && conjunção
        true && true == true
        true && false == false
        false && true == false
        false && false == false
    || disjunção
        true || true == true
        true || false == true
        false || true == true
        false || false == false
    Exmplos: 
        idade >= 15 && idade <= 17  // a idade está entre 15 e 17?
        estado == RJ || estado == 'SP''  // o estado é RJ ou SP?
        salario > 1500 && sexo != 'M'   // o salário é acima de 1500 e não é homem?

    Obs: quando eu tenho operadores relacionais, aritmeticos e lógicos na mesma expressão, essa é a ordem:
        * aritmeticos
        * relacionais
        * lógicos
    Precedência:
        aritmeticos (), **, /, +, %, -
        relacionais >, <, >=, <=, , ==, !=,
        lógicos na orderm
            * !
            * &&
            * ||
#ternário:
    ?, : dentro de uma mesma expressão.
    teste ? true : false
    média >= 7.0 ? "aprovado" : "reprovado"

-------------------------------------------------------------------------

Modulo C - DOM - Document Object Model
Modelo de objetos para documentos.

#Arvore DOM:
* window {Location, Document, History }
    * Document 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>DOM</title>
</head>
<body>
    <header>
        <h1>DOM Manipulation</h1>
        <p>Manipulate the DOM using JavaScript. Document Object Model</p>
    </header>
    <main id="content">
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Est necessitatibus consequatur illo placeat! Amet facilis eos commodi! Asperiores, atque sed. Mollitia sunt, totam voluptate ex minus placeat numquam saepe possimus.
    </main>
    <script src="script.js"></script>
</body>
</html>

    
        
#Existem várias maneiras de navegar pelos elementos:
    por marca
    por id
    por nome
    por classe
    por seletor

#Por marca (tag):
<html>
    <head>
    </head>
<body>
    <p> Alguma texto</p>
</body>
</html>

    getElementsByTagName()

    var p1 = window.document.getElementsByTagName('p')[0]
    window.document.write('Parágrafo: ' + p1.innerHTML)
    p1.style.color = 'white'

#Por ID:
<html>
    <head>
    </head>
<body>
    <div id='content'> Alguma texto</div>
</body>
</html>

    var d = window.document.getElementById('content')
    d.style.background = 'green'
    //d.innerText = 'Olá MUndo'
    window.document.getElementById('content').innerText = 'Olá MUndo'

#Por name:

    <html>
        <head>
        </head>
        <body>
            <div name = 'content'> Alguma texto</div>
        </body>
    </html>

    var x = window.document.getElementsByName('content')[0]
    x.innerText = 'Olá Mundo'

#Por classe:

    <html>
        <head>
        </head>
        <body>
            <div class= 'content'> Alguma texto</div>
        </body>
    </html>

    var x = window.document.getElementsByClassName('content')[0]
    x.innerText = 'Olá Mundo'

#Por Seletor:

    <html>
        <head>
        </head>
        <body>
            <div id= 'content'> Alguma texto</div>
        </body>
    </html>

    var x = window.document.queySelector('div#content')
    x.style.color = 'black'

    se for class fica assim ('.content')

------------------------------------------------------------------



------------------------------------------------------------------

Funções e Eventos

#1. Evento click

	•	Ocorre quando o usuário clica em um elemento, como um botão ou um link.
	•	Muito usado para interações, como enviar formulários, abrir modais ou executar funções.

Exemplo:

    #html
        <button id="meuBotao">Clique aqui</button>
    #javaScript
        document.getElementById('meuBotao').addEventListener('click', () => {
        alert('Botão clicado!');
        });

#2. Evento input

        •	Disparado sempre que o valor de um campo de formulário (como <input> ou <textarea>) é alterado.
        •	Útil para capturar e processar entradas em tempo real, como validação de campos ou busca dinâmica.
    
Exemplo:

    #html
        <input id="campoTexto" type="text" placeholder="Digite algo">
    #JavaScript
        document.getElementById('campoTexto').addEventListener('input', (e) => {
        console.log('Valor atual:', e.target.value);
        });


#3. Evento mouseover

        •	Ocorre quando o cursor do mouse passa sobre um elemento.
        •	Usado para destacar elementos, exibir dicas (tooltips), ou criar efeitos visuais.
    
Exemplo:

#html
    <p id="meuParagrafo">Passe o mouse sobre este texto.</p>
#JavaScript
    document.getElementById('meuParagrafo').addEventListener('mouseover', () => {
    document.getElementById('meuParagrafo').style.color = 'blue';
    });



#Outros Eventos Comuns

    Além dos citados, aqui estão mais exemplos:
        •	keydown: Quando uma tecla é pressionada.
        •	submit: Quando um formulário é enviado.
        •	scroll: Quando o usuário rola a página.

------------------------------------------------------------

#Funções

Uma função em JavaScript é um bloco de código reutilizável que executa uma tarefa específica ou calcula um valor. Funções ajudam a organizar e modularizar o código, tornando-o mais legível, reutilizável e fácil de manter.

#Componentes de uma Função

	1.	Definição: Declaração do bloco de código que será executado.
	2.	Parâmetros: Valores (opcionais) que a função pode receber para trabalhar.
	3.	Retorno (opcional): Valor ou resultado que a função devolve ao final da execução.

#JavaScript

    function nomeDaFuncao(parâmetro1, parâmetro2) {
    // Bloco de código a ser executado
    return resultado; // (Opcional) Retorna um valor
}
Exemplo 1:  Soma de dois números
#JavaScript

    function somar(a, b) {
        return a + b;
}

// Chamada da função
let resultado = somar(5, 3);
console.log(resultado); // Saída: 8

#Vantagens do Uso de Funções

	1.	Reutilização de Código: Você pode chamar a mesma função várias vezes com diferentes valores.
	2.	Organização: Ajuda a dividir o código em partes menores e mais gerenciáveis.
	3.	Reduz Redundância: Evita repetir o mesmo bloco de código várias vezes.
	4.	Manutenção Facilitada: Alterações feitas na função afetam todas as chamadas automaticamente.

#Tipos de Funções em JavaScript

#1.	Declaração de Função (Function Declaration):

	•	Funções definidas com a palavra-chave function.
	•	Podem ser chamadas antes de sua definição devido ao hoisting.
    
    function cumprimentar() {
        console.log('Olá!');
    }
    cumprimentar(); // Saída: Olá!


#2.	Funções Anônimas (Function Expressions):
	•	Funções atribuídas a variáveis.
	•	Não têm nome e não são carregadas pelo hoisting.

    const somar = function(a, b) {
        return a + b;
    };
    console.log(somar(2, 3)); // Saída: 5


#3.	Arrow Functions:

	•	Introduzidas no ES6.
	•	São mais concisas e não possuem seu próprio this.

    const multiplicar = (a, b) => a * b;
    console.log(multiplicar(2, 3)); // Saída: 6


#Funções sem Retorno

    Funções nem sempre precisam retornar valores. Algumas simplesmente executam ações, como exibir uma mensagem no console ou atualizar um elemento na página.

Exemplo:
    function mostrarMensagem() {
        console.log('Bem-vindo ao JavaScript!');
    }
    mostrarMensagem(); // Saída: Bem-vindo ao JavaScript!


#Funções com valores Padrão:

    Funções podem ter valores padrão para seus parâmetros:

Exemplo:
    function cumprimentar(nome = 'Visitante') {
        console.log(`Olá, ${nome}!`);
    }
    cumprimentar(); // Saída: Olá, Visitante!
    cumprimentar('Maria'); // Saída: Olá, Maria!


#Resumo

    Funções são blocos fundamentais na programação em JavaScript. Elas permitem:
        •	Modificar e manipular dados.
        •	Dividir o código em partes reutilizáveis.
        •	Tornar o desenvolvimento mais eficiente.

--------------------------------------------------------

#Variáveis
    Variáveis Simples: Só conseguem armazenar um valor por vez
Exemplo: Só

    Variáveis Compostas: Devem ser capazes de armazenar vários valores em uma mesma estrutura.
Exemplo: 

    vaga a = [ 0,  1,  2,] (exemplo da vaga de carro)
    a = a variável recebe o nome de array ou vetor
    o vetor é composto pelo elemento. O elemento de um vetor é um par que agrupa o espaço da memória, o valor colado dentro dele e um índice.
    Índice = [ 0, 1, 2,]
    O conteúdo de cada elemento, que seria "os carros nas vagas".
Exemplo: 
    let num = [ , , ]

#Functions

    São ações executadas assim que são chamadas ou em decorrência de algum evento.

    Uma função pode receber parâmetros e retornar um resultado.

    partes da função: 
        .chamadas
        .parâmetro
        .ação
        .retorno

#Exercicio do modulo F comentado

// Declaração de uma lista vazia para armazenar os números inseridos
let lista = [];

// Função para adicionar números à lista e ao elemento <select>
function adicionar() {
    // Captura o valor do input com ID "numero"
    const numeroInput = document.getElementById("numero");
    // Converte o valor para um número (o input sempre retorna uma string)
    const numero = Number(numeroInput.value);
    // Captura o elemento <select> onde os valores serão exibidos
    const select = document.getElementById("valores");

    // Valida se o número está entre 1 e 100 e se já foi adicionado
    if (numero < 1 || numero > 100 || lista.includes(numero)) {
        alert("Número inválido ou já adicionado.");
        // Limpa o campo e coloca o foco para facilitar nova entrada
        numeroInput.value = "";
        numeroInput.focus();
        return; // Sai da função para evitar adicionar um valor inválido
    }

    // Adiciona o número à lista
    lista.push(numero);

    // Cria um novo elemento <option> para exibir no <select>
    const option = document.createElement("option");
    option.text = `Valor ${numero} adicionado.`; // Texto exibido no <select>
    select.add(option); // Adiciona o <option> ao <select>

    // Limpa o campo de entrada e coloca o foco novamente
    numeroInput.value = "";
    numeroInput.focus();
}

// Função para analisar os números na lista e exibir informações
function analisar() {
    // Se a lista estiver vazia, alerta o usuário
    if (lista.length === 0) {
        alert("Adicione números antes de analisar.");
        return;
    }

    // Calcula as informações solicitadas:
    const total = lista.length; // Quantidade de números
    const maior = Math.max(...lista); // Maior número
    const menor = Math.min(...lista); // Menor número
    const soma = lista.reduce((acc, num) => acc + num, 0); // Soma de todos os números
    const media = soma / total; // Média dos números

    // Atualiza a div de resultados com as informações
    const resultadoDiv = document.getElementById("resultado");
    resultadoDiv.innerHTML = `
        <p>Ao todo, temos ${total} números cadastrados.</p>
        <p>O maior valor informado foi ${maior}.</p>
        <p>O menor valor informado foi ${menor}.</p>
        <p>Somando todos os valores, temos ${soma}.</p>
        <p>A média dos valores digitados é ${media.toFixed(2)}.</p>
    `;
}

// Função para limpar os dados e reiniciar a interface
function limpar() {
    // Reseta a lista de números
    lista = [];
    // Limpa os elementos da interface
    document.getElementById("valores").innerHTML = ""; // Limpa o <select>
    document.getElementById("resultado").innerHTML = ""; // Limpa os resultados
    document.getElementById("numero").value = ""; // Limpa o campo de entrada
    document.getElementById("numero").focus(); // Coloca o foco no campo de entrada
}

Resumo das funções:
	1.	adicionar:
	•	Verifica se o número está no intervalo correto (1 a 100) e se já foi adicionado.
	•	Adiciona o número à lista lista e ao <select> para exibição.
	2.	analisar:
	•	Processa os dados da lista (total de números, maior, menor, soma e média).
	•	Exibe essas informações formatadas na div resultado.
	3.	limpar:
	•	Reseta a lista de números e todos os elementos da interface para começar do zero.

Conceitos envolvidos:
	•	Arrays: Usados para armazenar os números inseridos (lista).
	•	DOM Manipulation: Uso do document.getElementById para interagir com os elementos HTML.
	•	Métodos de array:
	•	push: Adiciona um item ao final do array.
	•	includes: Verifica se um item já existe no array.
	•	reduce: Soma todos os valores do array.
	•	Math.max e Math.min: Encontram o maior e o menor valor do array.
	•	String Literals: Usados para formatar o texto exibido (${variável}).

 😊



Essa linha é um exemplo do uso do método reduce() em arrays no JavaScript. Vamos dividi-la em partes para entender como ela funciona:

Código:

const soma = lista.reduce((acc, num) => acc + num, 0);

Explicação:
	1.	reduce():
	•	O método reduce() percorre o array e aplica uma função de “acumulação”, que combina os elementos do array em um único valor.
	•	A função passada para reduce() recebe dois parâmetros principais:
	•	acc (acumulador): Um valor que “carrega” o resultado parcial da operação enquanto o método percorre o array.
	•	num (valor atual): O elemento atual do array que está sendo processado.
	•	O segundo argumento de reduce() (0 neste caso) define o valor inicial do acumulador.
	2.	Função de callback (acc, num) => acc + num:
	•	Esta é uma função “flecha” (arrow function) que define como combinar o acumulador e o valor atual.
	•	Aqui, ela simplesmente soma os dois valores: o acumulador (acc) e o valor atual (num).
	3.	0 (valor inicial):
	•	Este é o valor inicial do acumulador.
	•	Sem ele, o reduce() usaria o primeiro elemento do array como valor inicial, o que pode causar problemas em arrays vazios.

Como funciona na prática:

Se o array lista contém os números [1, 2, 3, 4], o reduce() funciona assim:
	•	Primeira iteração:
	•	acc = 0 (valor inicial), num = 1
	•	Retorno: 0 + 1 = 1
	•	Segunda iteração:
	•	acc = 1 (resultado anterior), num = 2
	•	Retorno: 1 + 2 = 3
	•	Terceira iteração:
	•	acc = 3 (resultado anterior), num = 3
	•	Retorno: 3 + 3 = 6
	•	Quarta iteração:
	•	acc = 6 (resultado anterior), num = 4
	•	Retorno: 6 + 4 = 10

Ao final, o acumulador (acc) conterá o valor 10, que é a soma de todos os números no array.

Resultado:

No final do reduce(), o valor retornado é armazenado na variável soma, que conterá o total de todos os valores no array lista.

Vantagens de reduce():
	•	Muito útil para resumir os dados de um array (como somar, multiplicar, encontrar o maior valor, etc.).
	•	É declarativo e evita loops manuais (for ou while).



    Equivalente usando um for:

    Se você quisesse fazer o mesmo sem reduce(), poderia usar um loop assim:

    let soma = 0;
    for (let i = 0; i < lista.length; i++) {
        soma += lista[i];
    }

    Ambas as abordagens são válidas, mas o reduce() é mais conciso e idiomático no JavaScript moderno.